# -*- coding: utf-8 -*-
# Copyright (C) 2016 Akretion France (www.akretion.com)
# @author: Alexis de Lattre <alexis.delattre@akretion.com>
# The licence is in the file __openerp__.py
-
  Mass import of UBL sample invoices
-
  !python {model: account.invoice.import}: |
    import base64
    from openerp.tools import file_open
    from openerp.tools import float_compare
    sample_files = {
        'UBLKetentest_Referentiefactuur_20150100.xml': {
            'invoice_number': '20150101',
            'amount_untaxed': 420.0,
            'amount_total': 475.20,
            'date_invoice': '2015-02-16',
            'due_date': '2015-02-16',
            'partner_xmlid': 'ketentest',
            },
        }
    aio = self.pool['account.invoice']
    precision = self.pool['decimal.precision'].precision_get(cr, uid, 'Account')
    for (sample_file, res_dict) in sample_files.iteritems():
        f = file_open('account_invoice_import_ubl/test/invoices/' + sample_file, 'rb')
        pdf_file = f.read()
        f.close()
        wiz_id = self.create(cr, uid, {
            'invoice_file': base64.b64encode(pdf_file),
            'invoice_filename': sample_file,
            }, context=context)
        self.import_invoice(cr, uid, wiz_id, context=context)
        inv_ids = aio.search(cr, uid, [
            ('state', '=', 'draft'),
            ('type', 'in', ('in_invoice', 'in_refund')),
            ('supplier_invoice_number', '=', res_dict['invoice_number'])
            ], context=context)
        assert len(inv_ids) == 1, 'Supplier draft invoice has not been created'
        inv = aio.browse(cr, uid, inv_ids[0], context=context)
        assert inv.type == res_dict.get('type', 'in_invoice'), 'Wrong invoice type'
        assert inv.date_invoice == res_dict['date_invoice'], 'Wrong invoice date'
        if res_dict.get('date_due'):
            assert inv.date_due == res_dict['date_due'], 'Wrong due date'
        assert inv.partner_id.id == ref(res_dict['partner_xmlid']), 'Wrong supplier'
        assert float_compare(inv.amount_untaxed, res_dict['amount_untaxed'], precision_digits=precision) == 0, 'Wrong untaxed amount'
        assert float_compare(inv.check_total, res_dict['amount_total'], precision_digits=precision) == 0, 'Wrong check_total'
        assert float_compare(inv.amount_total, res_dict['amount_total'], precision_digits=precision) == 0, 'Wrong amount_total'
        aio.unlink(cr, uid, inv_ids, context=context)
